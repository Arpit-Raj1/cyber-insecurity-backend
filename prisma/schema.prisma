generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Customer {
    id            String       @id @default(uuid()) @db.Uuid
    name          String
    email         String       @unique
    phone         String       @unique
    password      String
    address       Json[]
    customerType  CustomerType @default(INDIVIDUAL)
    dateOfBirth   DateTime
    pan           String       @unique
    settingConfig Json
    account Account[]
    payee   Payee[] @relation("payee")
    payer   Payee[] @relation("payer")
}

enum CustomerType {
    INDIVIDUAL
    SHOPPING
    ENTERTAINMENT
    HOUSING
    FOOD
    OTHERS

}



model Account {
    accNo       String      @id @unique
    customerId  String      @db.Uuid
    ifsc        String
    accountType AccountType @default(SAVINGS)
    balance     Float       @default(0)
    status      Boolean     @default(true)
    createdOn   DateTime    @default(now())
    updatedOn   DateTime    @updatedAt
    deletedOn   DateTime?
    customer Customer @relation(fields: [customerId], references: [id])
    sent     Transaction[] @relation("sent")
    received Transaction[] @relation("received")
    loans    Loan[]
    payer   Payee[] 
}

enum AccountType {
    SAVINGS
    CURRENT
    LOAN
    CREDIT_CARD
    INVESTMENT
}

model Transaction {
    id              String          @id @default(uuid()) @db.Uuid
    transactionType TransactionType
    senderAccNo     String          
    receiverAccNo   String          
    amount          Float
    status          Boolean
    category        String
    description     String?
    timestamp       DateTime        @default(now())
    loanId          String?         @db.Uuid

    senderAccount   Account @relation("sent", fields: [senderAccNo], references: [accNo])
    receiverAccount Account @relation("received", fields: [receiverAccNo], references: [accNo])
    loan            Loan?   @relation(fields: [loanId], references: [id])

}

enum TransactionType {
    PAYMENT
    TRANSFER
}

model Loan {
    id              String   @id @default(uuid()) @db.Uuid
    accNo           String   
    loanType        LoanType
    interestRate    Float
    principalAmount Float
    interestAmount  Float
    term            Int
    startDate       DateTime
    endDate         DateTime
    status          Boolean  @default(true)
    createdOn       DateTime @default(now())
    updatedOn       DateTime @updatedAt
    schedule        Json[]
    dueAmount       Float
    Account  Account       @relation(fields: [accNo], references: [accNo])
    payments Transaction[]
}

enum LoanType {
    HOME
    AUTO
    PERSONAL
    STUDENT
}

model Payee{
    id          String @id @default(uuid()) @db.Uuid
    name        String
    payeeAccNo       String
    payeeifsc        String
    payeeCustomerId  String @db.Uuid
    payerCustomerId  String @db.Uuid
    payeeType        CustomerType @default(INDIVIDUAL)
    payeeAccount Account @relation(fields: [payeeAccNo], references: [accNo])
    payeeCustomer Customer @relation("payee", fields: [payeeCustomerId], references: [id])
    payerCustomer Customer @relation("payer", fields: [payerCustomerId], references: [id])

}
